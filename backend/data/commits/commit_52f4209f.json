{
  "id": "commit_52f4209f_1756925655",
  "timestamp": "2025-09-04T00:24:15.965758+05:30",
  "commit_hash": "52f4209f7a074e45cff5d9a933dadfb61ef0cae9",
  "author": "arpit529srivastava",
  "email": "arpitsrivastava529@gmail.com",
  "message": "checking\n\nSigned-off-by: arpit529srivastava \u003carpitsrivastava529@gmail.com\u003e\n",
  "files_changed": [
    "backend/bin/git-hook",
    "backend/bin/threat-modeler",
    "backend/cmd/git-hook/main.go",
    "backend/data/commits/commit_a50aebc8.json",
    "backend/data/commits/commit_f114c2fb.json",
    "backend/data/commits/latest.json",
    "backend/hrhrhr.txt",
    "backend/internal/api/routes.go",
    "backend/internal/handlers/commit_analysis.go",
    "backend/internal/models/models.go",
    "backend/internal/services/commit_storage.go",
    "backend/internal/services/git_service.go",
    "backend/main.go",
    "backend/scripts/setup-git-hooks.sh"
  ],
  "additions": 574,
  "deletions": 82,
  "file_diffs": [
    {
      "file_name": "backend/bin/git-hook",
      "status": "M",
      "additions": 0,
      "deletions": 0,
      "diff": "diff --git a/backend/bin/git-hook b/backend/bin/git-hook\nindex c41939f..c3447bc 100755\nBinary files a/backend/bin/git-hook and b/backend/bin/git-hook differ\n"
    },
    {
      "file_name": "backend/bin/threat-modeler",
      "status": "A",
      "additions": 0,
      "deletions": 0,
      "diff": "diff --git a/backend/bin/threat-modeler b/backend/bin/threat-modeler\nnew file mode 100755\nindex 0000000..7d1690e\nBinary files /dev/null and b/backend/bin/threat-modeler differ\n"
    },
    {
      "file_name": "backend/cmd/git-hook/main.go",
      "status": "M",
      "additions": 11,
      "deletions": 3,
      "diff": "diff --git a/backend/cmd/git-hook/main.go b/backend/cmd/git-hook/main.go\nindex 8497029..5943f06 100644\n--- a/backend/cmd/git-hook/main.go\n+++ b/backend/cmd/git-hook/main.go\n@@ -10,17 +10,19 @@ import (\n func main() {\n \tvar (\n \t\trepoPath   = flag.String(\"repo\", \"\", \"Path to git repository (default: current directory)\")\n \t\tcommitHash = flag.String(\"commit\", \"\", \"Specific commit hash to analyze (default: latest)\")\n \t\thookMode   = flag.Bool(\"hook\", false, \"Run in git hook mode\")\n+\t\tapiMode    = flag.Bool(\"api\", false, \"Send analysis to API instead of just console output\")\n+\t\tapiURL     = flag.String(\"api-url\", \"http://localhost:8080\", \"API base URL\")\n \t)\n \tflag.Parse()\n \n \t// Determine repository path\n \tvar gitRepoPath string\n \tvar err error\n-\t\n+\n \tif *repoPath != \"\" {\n \t\tgitRepoPath = *repoPath\n \t} else {\n \t\tgitRepoPath, err = services.GetCurrentRepoPath()\n \t\tif err != nil {\n@@ -32,12 +34,18 @@ func main() {\n \tgitService := services.NewGitService(gitRepoPath)\n \n \tif *hookMode {\n \t\t// Run in hook mode - analyze latest commit\n \t\tlog.Println(\"üéØ Running git commit analysis hook...\")\n-\t\tif err := gitService.OnCommitHook(); err != nil {\n-\t\t\tlog.Fatalf(\"‚ùå Hook execution failed: %v\", err)\n+\t\tif *apiMode {\n+\t\t\tif err := gitService.OnCommitHookWithAPI(*apiURL); err != nil {\n+\t\t\t\tlog.Fatalf(\"‚ùå Hook execution failed: %v\", err)\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif err := gitService.OnCommitHook(); err != nil {\n+\t\t\t\tlog.Fatalf(\"‚ùå Hook execution failed: %v\", err)\n+\t\t\t}\n \t\t}\n \t} else if *commitHash != \"\" {\n \t\t// Analyze specific commit\n \t\tlog.Printf(\"üîç Analyzing commit: %s\", *commitHash)\n \t\tcommitDiff, err := gitService.GetCommitDiff(*commitHash)\n"
    },
    {
      "file_name": "backend/data/commits/commit_a50aebc8.json",
      "status": "A",
      "additions": 23,
      "deletions": 0,
      "diff": "diff --git a/backend/data/commits/commit_a50aebc8.json b/backend/data/commits/commit_a50aebc8.json\nnew file mode 100644\nindex 0000000..00b63fb\n--- /dev/null\n+++ b/backend/data/commits/commit_a50aebc8.json\n@@ -0,0 +1,23 @@\n+{\n+  \"id\": \"commit_a50aebc8_1756925410\",\n+  \"timestamp\": \"2025-09-04T00:20:10.529728+05:30\",\n+  \"commit_hash\": \"a50aebc8ecfa2b4d72cddb7863fff4db3723ab0b\",\n+  \"author\": \"arpit529srivastava\",\n+  \"email\": \"arpitsrivastava529@gmail.com\",\n+  \"message\": \"hmm\\n\\nSigned-off-by: arpit529srivastava \\u003carpitsrivastava529@gmail.com\\u003e\\n\",\n+  \"files_changed\": [\n+    \"backend/bin/git-hook\"\n+  ],\n+  \"additions\": 0,\n+  \"deletions\": 0,\n+  \"file_diffs\": [\n+    {\n+      \"file_name\": \"backend/bin/git-hook\",\n+      \"status\": \"A\",\n+      \"additions\": 0,\n+      \"deletions\": 0,\n+      \"diff\": \"diff --git a/backend/bin/git-hook b/backend/bin/git-hook\\nnew file mode 100755\\nindex 0000000..c41939f\\nBinary files /dev/null and b/backend/bin/git-hook differ\\n\"\n+    }\n+  ],\n+  \"full_diff\": \" backend/bin/git-hook | Bin 0 -\\u003e 8896930 bytes\\n 1 file changed, 0 insertions(+), 0 deletions(-)\\n\\ndiff --git a/backend/bin/git-hook b/backend/bin/git-hook\\nnew file mode 100755\\nindex 0000000000000000000000000000000000000000..c41939fc3c1298147716bcfa881ff5112dc896fb\\nBinary files /dev/null and b/backend/bin/git-hook differ\\n\"\n+}\n\\ No newline at end of file\n"
    },
    {
      "file_name": "backend/data/commits/commit_f114c2fb.json",
      "status": "A",
      "additions": 23,
      "deletions": 0,
      "diff": "diff --git a/backend/data/commits/commit_f114c2fb.json b/backend/data/commits/commit_f114c2fb.json\nnew file mode 100644\nindex 0000000..e2e26e0\n--- /dev/null\n+++ b/backend/data/commits/commit_f114c2fb.json\n@@ -0,0 +1,23 @@\n+{\n+  \"id\": \"commit_f114c2fb_1756925492\",\n+  \"timestamp\": \"2025-09-04T00:21:32.818898+05:30\",\n+  \"commit_hash\": \"f114c2fb808014b24a6d0d7329c563221931d62b\",\n+  \"author\": \"arpit529srivastava\",\n+  \"email\": \"arpitsrivastava529@gmail.com\",\n+  \"message\": \"Final test of API integration\\n\",\n+  \"files_changed\": [\n+    \"test_file.txt\"\n+  ],\n+  \"additions\": 1,\n+  \"deletions\": 0,\n+  \"file_diffs\": [\n+    {\n+      \"file_name\": \"test_file.txt\",\n+      \"status\": \"M\",\n+      \"additions\": 1,\n+      \"deletions\": 0,\n+      \"diff\": \"diff --git a/test_file.txt b/test_file.txt\\nindex 78f7014..9fc63ac 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+    }\n+  ],\n+  \"full_diff\": \" test_file.txt | 1 +\\n 1 file changed, 1 insertion(+)\\n\\ndiff --git a/test_file.txt b/test_file.txt\\nindex 78f701474af270aa146e20f571427bfa5a05c1d0..9fc63ac31a48ddf463e1ae318aec6d3a36c8bed0 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+}\n\\ No newline at end of file\n"
    },
    {
      "file_name": "backend/data/commits/latest.json",
      "status": "A",
      "additions": 23,
      "deletions": 0,
      "diff": "diff --git a/backend/data/commits/latest.json b/backend/data/commits/latest.json\nnew file mode 100644\nindex 0000000..e2e26e0\n--- /dev/null\n+++ b/backend/data/commits/latest.json\n@@ -0,0 +1,23 @@\n+{\n+  \"id\": \"commit_f114c2fb_1756925492\",\n+  \"timestamp\": \"2025-09-04T00:21:32.818898+05:30\",\n+  \"commit_hash\": \"f114c2fb808014b24a6d0d7329c563221931d62b\",\n+  \"author\": \"arpit529srivastava\",\n+  \"email\": \"arpitsrivastava529@gmail.com\",\n+  \"message\": \"Final test of API integration\\n\",\n+  \"files_changed\": [\n+    \"test_file.txt\"\n+  ],\n+  \"additions\": 1,\n+  \"deletions\": 0,\n+  \"file_diffs\": [\n+    {\n+      \"file_name\": \"test_file.txt\",\n+      \"status\": \"M\",\n+      \"additions\": 1,\n+      \"deletions\": 0,\n+      \"diff\": \"diff --git a/test_file.txt b/test_file.txt\\nindex 78f7014..9fc63ac 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+    }\n+  ],\n+  \"full_diff\": \" test_file.txt | 1 +\\n 1 file changed, 1 insertion(+)\\n\\ndiff --git a/test_file.txt b/test_file.txt\\nindex 78f701474af270aa146e20f571427bfa5a05c1d0..9fc63ac31a48ddf463e1ae318aec6d3a36c8bed0 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+}\n\\ No newline at end of file\n"
    },
    {
      "file_name": "backend/hrhrhr.txt",
      "status": "A",
      "additions": 1,
      "deletions": 0,
      "diff": "diff --git a/backend/hrhrhr.txt b/backend/hrhrhr.txt\nnew file mode 100644\nindex 0000000..3c4ab6a\n--- /dev/null\n+++ b/backend/hrhrhr.txt\n@@ -0,0 +1 @@\n+hello testing\n\\ No newline at end of file\n"
    },
    {
      "file_name": "backend/internal/api/routes.go",
      "status": "M",
      "additions": 7,
      "deletions": 2,
      "diff": "diff --git a/backend/internal/api/routes.go b/backend/internal/api/routes.go\nindex 96a2a4d..b9e5c7f 100644\n--- a/backend/internal/api/routes.go\n+++ b/backend/internal/api/routes.go\n@@ -1,10 +1,10 @@\n package api\n \n import (\n \t\"github.com/gofiber/fiber/v2\"\n-\t\n+\n \t\"adaptive-threat-modeler/internal/handlers\"\n )\n \n // SetupRoutes configures all API routes\n func SetupRoutes(app *fiber.App) {\n@@ -24,9 +24,14 @@ func SetupRoutes(app *fiber.App) {\n \n \t// Rules endpoints\n \tapi.Get(\"/rules\", handlers.GetAvailableRules)\n \tapi.Get(\"/rules/:language\", handlers.GetRulesForLanguage)\n \n+\t// Commit analysis endpoints\n+\tapi.Get(\"/commits/latest\", handlers.GetLatestCommitAnalysis)\n+\tapi.Get(\"/commits/:hash\", handlers.GetCommitAnalysisByHash)\n+\tapi.Get(\"/commits\", handlers.GetAllCommitAnalyses)\n+\tapi.Post(\"/commits\", handlers.StoreCommitAnalysis)\n+\n \t// Health and info endpoints\n \tapi.Get(\"/info\", handlers.GetSystemInfo)\n }\n-\n"
    },
    {
      "file_name": "backend/internal/handlers/commit_analysis.go",
      "status": "A",
      "additions": 163,
      "deletions": 0,
      "diff": "diff --git a/backend/internal/handlers/commit_analysis.go b/backend/internal/handlers/commit_analysis.go\nnew file mode 100644\nindex 0000000..0dfa311\n--- /dev/null\n+++ b/backend/internal/handlers/commit_analysis.go\n@@ -0,0 +1,163 @@\n+package handlers\n+\n+import (\n+\t\"strconv\"\n+\n+\t\"adaptive-threat-modeler/internal/models\"\n+\t\"adaptive-threat-modeler/internal/services\"\n+\n+\t\"github.com/gofiber/fiber/v2\"\n+)\n+\n+var commitStorage *services.CommitStorageService\n+\n+// InitializeCommitStorage initializes the commit storage service\n+func InitializeCommitStorage(storagePath string) {\n+\tcommitStorage = services.NewCommitStorageService(storagePath)\n+}\n+\n+// GetLatestCommitAnalysis returns the most recent commit analysis data\n+func GetLatestCommitAnalysis(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\tanalysis, err := commitStorage.GetLatestCommitAnalysis()\n+\tif err != nil {\n+\t\treturn c.Status(404).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"data\":    analysis,\n+\t})\n+}\n+\n+// GetCommitAnalysisByHash returns commit analysis data for a specific commit hash\n+func GetCommitAnalysisByHash(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\tcommitHash := c.Params(\"hash\")\n+\tif commitHash == \"\" {\n+\t\treturn c.Status(400).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit hash is required\",\n+\t\t})\n+\t}\n+\n+\tanalysis, err := commitStorage.GetCommitAnalysisByHash(commitHash)\n+\tif err != nil {\n+\t\treturn c.Status(404).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"data\":    analysis,\n+\t})\n+}\n+\n+// GetAllCommitAnalyses returns all stored commit analyses\n+func GetAllCommitAnalyses(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\t// Parse query parameters for pagination\n+\tpage := 1\n+\tlimit := 10\n+\n+\tif pageStr := c.Query(\"page\"); pageStr != \"\" {\n+\t\tif p, err := strconv.Atoi(pageStr); err == nil \u0026\u0026 p \u003e 0 {\n+\t\t\tpage = p\n+\t\t}\n+\t}\n+\n+\tif limitStr := c.Query(\"limit\"); limitStr != \"\" {\n+\t\tif l, err := strconv.Atoi(limitStr); err == nil \u0026\u0026 l \u003e 0 \u0026\u0026 l \u003c= 100 {\n+\t\t\tlimit = l\n+\t\t}\n+\t}\n+\n+\tanalyses, err := commitStorage.GetAllCommitAnalyses()\n+\tif err != nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\t// Simple pagination\n+\ttotal := len(analyses)\n+\tstart := (page - 1) * limit\n+\tend := start + limit\n+\n+\tvar paginatedAnalyses []*models.CommitAnalysisData\n+\tif start \u003e= total {\n+\t\tpaginatedAnalyses = []*models.CommitAnalysisData{}\n+\t} else {\n+\t\tif end \u003e total {\n+\t\t\tend = total\n+\t\t}\n+\t\tpaginatedAnalyses = analyses[start:end]\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"data\": fiber.Map{\n+\t\t\t\"analyses\": paginatedAnalyses,\n+\t\t\t\"pagination\": fiber.Map{\n+\t\t\t\t\"page\":        page,\n+\t\t\t\t\"limit\":       limit,\n+\t\t\t\t\"total\":       total,\n+\t\t\t\t\"total_pages\": (total + limit - 1) / limit,\n+\t\t\t},\n+\t\t},\n+\t})\n+}\n+\n+// StoreCommitAnalysis stores new commit analysis data (used by git hook)\n+func StoreCommitAnalysis(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\tvar commitDiff services.CommitDiff\n+\tif err := c.BodyParser(\u0026commitDiff); err != nil {\n+\t\treturn c.Status(400).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Invalid request body\",\n+\t\t})\n+\t}\n+\n+\tif err := commitStorage.StoreCommitAnalysis(\u0026commitDiff); err != nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"message\": \"Commit analysis stored successfully\",\n+\t})\n+}\n"
    },
    {
      "file_name": "backend/internal/models/models.go",
      "status": "M",
      "additions": 64,
      "deletions": 40,
      "diff": "diff --git a/backend/internal/models/models.go b/backend/internal/models/models.go\nindex 9c39c9c..19bb831 100644\n--- a/backend/internal/models/models.go\n+++ b/backend/internal/models/models.go\n@@ -10,15 +10,15 @@ type AnalysisRequest struct {\n \tFilename string `json:\"filename,omitempty\"`\n }\n \n // ProjectInfo contains detected project metadata\n type ProjectInfo struct {\n-\tLanguages   []string          `json:\"languages\"`\n-\tFrameworks  []string          `json:\"frameworks\"`\n-\tServices    []ServiceInfo     `json:\"services\"`\n+\tLanguages    []string          `json:\"languages\"`\n+\tFrameworks   []string          `json:\"frameworks\"`\n+\tServices     []ServiceInfo     `json:\"services\"`\n \tDependencies map[string]string `json:\"dependencies\"`\n-\tConfigFiles []string          `json:\"config_files\"`\n+\tConfigFiles  []string          `json:\"config_files\"`\n }\n \n // ServiceInfo represents a detected service/component\n type ServiceInfo struct {\n \tName      string            `json:\"name\"`\n@@ -27,15 +27,15 @@ type ServiceInfo struct {\n \tConfig    map[string]string `json:\"config,omitempty\"`\n }\n \n // EndpointInfo represents an API endpoint\n type EndpointInfo struct {\n-\tPath     string   `json:\"path\"`\n-\tMethod   string   `json:\"method\"`\n-\tHandler  string   `json:\"handler\"`\n-\tParams   []string `json:\"params,omitempty\"`\n-\tAuthReq  bool     `json:\"auth_required\"`\n+\tPath    string   `json:\"path\"`\n+\tMethod  string   `json:\"method\"`\n+\tHandler string   `json:\"handler\"`\n+\tParams  []string `json:\"params,omitempty\"`\n+\tAuthReq bool     `json:\"auth_required\"`\n }\n \n // Vulnerability represents a security finding\n type Vulnerability struct {\n \tID          string            `json:\"id\"`\n@@ -73,24 +73,24 @@ type AutoFix struct {\n \tConfidence  string `json:\"confidence\"` // high, medium, low\n }\n \n // ThreatMap represents the visual threat model\n type ThreatMap struct {\n-\tComponents []Component  `json:\"components\"`\n-\tFlows      []DataFlow   `json:\"flows\"`\n-\tTrustZones []TrustZone  `json:\"trust_zones\"`\n-\tAssets     []Asset      `json:\"assets\"`\n+\tComponents []Component `json:\"components\"`\n+\tFlows      []DataFlow  `json:\"flows\"`\n+\tTrustZones []TrustZone `json:\"trust_zones\"`\n+\tAssets     []Asset     `json:\"assets\"`\n }\n \n // Component represents a system component\n type Component struct {\n-\tID          string            `json:\"id\"`\n-\tName        string            `json:\"name\"`\n-\tType        string            `json:\"type\"` // process, datastore, external_entity\n-\tTrustZone   string            `json:\"trust_zone\"`\n-\tProperties  map[string]string `json:\"properties\"`\n-\tThreats     []string          `json:\"threats\"` // vulnerability IDs\n+\tID         string            `json:\"id\"`\n+\tName       string            `json:\"name\"`\n+\tType       string            `json:\"type\"` // process, datastore, external_entity\n+\tTrustZone  string            `json:\"trust_zone\"`\n+\tProperties map[string]string `json:\"properties\"`\n+\tThreats    []string          `json:\"threats\"` // vulnerability IDs\n }\n \n // DataFlow represents data movement between components\n type DataFlow struct {\n \tID          string            `json:\"id\"`\n@@ -112,36 +112,60 @@ type TrustZone struct {\n \tComponents  []string `json:\"components\"` // component IDs\n }\n \n // Asset represents a valuable resource\n type Asset struct {\n-\tID           string   `json:\"id\"`\n-\tName         string   `json:\"name\"`\n-\tType         string   `json:\"type\"` // data, service, infrastructure\n-\tSensitivity  string   `json:\"sensitivity\"` // public, internal, confidential, restricted\n-\tComponents   []string `json:\"components\"` // component IDs that handle this asset\n-\tThreats      []string `json:\"threats\"`\n+\tID          string   `json:\"id\"`\n+\tName        string   `json:\"name\"`\n+\tType        string   `json:\"type\"`        // data, service, infrastructure\n+\tSensitivity string   `json:\"sensitivity\"` // public, internal, confidential, restricted\n+\tComponents  []string `json:\"components\"`  // component IDs that handle this asset\n+\tThreats     []string `json:\"threats\"`\n }\n \n // AnalysisResult is the final response structure\n type AnalysisResult struct {\n-\tID             string            `json:\"id\"`\n-\tTimestamp      time.Time         `json:\"timestamp\"`\n-\tProjectInfo    ProjectInfo       `json:\"project_info\"`\n-\tVulnerabilities []Vulnerability  `json:\"vulnerabilities\"`\n-\tThreatMap      ThreatMap         `json:\"threat_map\"`\n-\tSummary        Summary           `json:\"summary\"`\n-\tRecommendations []string         `json:\"recommendations\"`\n-\tStatus         string            `json:\"status\"`\n-\tProcessingTime string            `json:\"processing_time\"`\n+\tID              string          `json:\"id\"`\n+\tTimestamp       time.Time       `json:\"timestamp\"`\n+\tProjectInfo     ProjectInfo     `json:\"project_info\"`\n+\tVulnerabilities []Vulnerability `json:\"vulnerabilities\"`\n+\tThreatMap       ThreatMap       `json:\"threat_map\"`\n+\tSummary         Summary         `json:\"summary\"`\n+\tRecommendations []string        `json:\"recommendations\"`\n+\tStatus          string          `json:\"status\"`\n+\tProcessingTime  string          `json:\"processing_time\"`\n }\n \n // Summary provides high-level statistics\n type Summary struct {\n-\tTotalVulnerabilities int                    `json:\"total_vulnerabilities\"`\n-\tSeverityBreakdown    map[string]int         `json:\"severity_breakdown\"`\n-\tCategoryBreakdown    map[string]int         `json:\"category_breakdown\"`\n-\tRiskScore           float64                 `json:\"risk_score\"`\n-\tSecurityPosture     string                  `json:\"security_posture\"` // excellent, good, fair, poor\n-\tTopRisks            []string                `json:\"top_risks\"`\n+\tTotalVulnerabilities int            `json:\"total_vulnerabilities\"`\n+\tSeverityBreakdown    map[string]int `json:\"severity_breakdown\"`\n+\tCategoryBreakdown    map[string]int `json:\"category_breakdown\"`\n+\tRiskScore            float64        `json:\"risk_score\"`\n+\tSecurityPosture      string         `json:\"security_posture\"` // excellent, good, fair, poor\n+\tTopRisks             []string       `json:\"top_risks\"`\n }\n \n+// CommitAnalysisData represents the stored commit analysis data\n+type CommitAnalysisData struct {\n+\tID           string     `json:\"id\"`\n+\tTimestamp    time.Time  `json:\"timestamp\"`\n+\tCommitHash   string     `json:\"commit_hash\"`\n+\tAuthor       string     `json:\"author\"`\n+\tEmail        string     `json:\"email\"`\n+\tMessage      string     `json:\"message\"`\n+\tFilesChanged []string   `json:\"files_changed\"`\n+\tAdditions    int        `json:\"additions\"`\n+\tDeletions    int        `json:\"deletions\"`\n+\tFileDiffs    []FileDiff `json:\"file_diffs\"`\n+\tFullDiff     string     `json:\"full_diff\"`\n+}\n+\n+// FileDiff represents changes to a single file (moved from git_service.go for API use)\n+type FileDiff struct {\n+\tFileName    string `json:\"file_name\"`\n+\tStatus      string `json:\"status\"` // A (added), M (modified), D (deleted), R (renamed)\n+\tAdditions   int    `json:\"additions\"`\n+\tDeletions   int    `json:\"deletions\"`\n+\tOldFileName string `json:\"old_file_name,omitempty\"` // For renamed files\n+\tDiff        string `json:\"diff\"`                    // The actual diff content for this file\n+}\n"
    },
    {
      "file_name": "backend/internal/services/commit_storage.go",
      "status": "A",
      "additions": 157,
      "deletions": 0,
      "diff": "diff --git a/backend/internal/services/commit_storage.go b/backend/internal/services/commit_storage.go\nnew file mode 100644\nindex 0000000..8a28fb3\n--- /dev/null\n+++ b/backend/internal/services/commit_storage.go\n@@ -0,0 +1,157 @@\n+package services\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"adaptive-threat-modeler/internal/models\"\n+)\n+\n+// CommitStorageService manages storage of commit analysis data\n+type CommitStorageService struct {\n+\tstoragePath string\n+\tmutex       sync.RWMutex\n+}\n+\n+// NewCommitStorageService creates a new commit storage service\n+func NewCommitStorageService(storagePath string) *CommitStorageService {\n+\t// Ensure storage directory exists\n+\tif err := os.MkdirAll(storagePath, 0755); err != nil {\n+\t\tpanic(fmt.Sprintf(\"Failed to create storage directory: %v\", err))\n+\t}\n+\n+\treturn \u0026CommitStorageService{\n+\t\tstoragePath: storagePath,\n+\t}\n+}\n+\n+// StoreCommitAnalysis stores commit analysis data to disk\n+func (c *CommitStorageService) StoreCommitAnalysis(commitDiff *CommitDiff) error {\n+\tc.mutex.Lock()\n+\tdefer c.mutex.Unlock()\n+\n+\t// Convert CommitDiff to CommitAnalysisData\n+\tanalysisData := \u0026models.CommitAnalysisData{\n+\t\tID:           fmt.Sprintf(\"commit_%s_%d\", commitDiff.CommitHash[:8], time.Now().Unix()),\n+\t\tTimestamp:    time.Now(),\n+\t\tCommitHash:   commitDiff.CommitHash,\n+\t\tAuthor:       commitDiff.Author,\n+\t\tEmail:        commitDiff.Email,\n+\t\tMessage:      commitDiff.Message,\n+\t\tFilesChanged: commitDiff.FilesChanged,\n+\t\tAdditions:    commitDiff.Additions,\n+\t\tDeletions:    commitDiff.Deletions,\n+\t\tFullDiff:     commitDiff.Diff,\n+\t}\n+\n+\t// Convert FileDiff to models.FileDiff\n+\tfor _, fileDiff := range commitDiff.FileDiffs {\n+\t\tanalysisData.FileDiffs = append(analysisData.FileDiffs, models.FileDiff{\n+\t\t\tFileName:    fileDiff.FileName,\n+\t\t\tStatus:      fileDiff.Status,\n+\t\t\tAdditions:   fileDiff.Additions,\n+\t\t\tDeletions:   fileDiff.Deletions,\n+\t\t\tOldFileName: fileDiff.OldFileName,\n+\t\t\tDiff:        fileDiff.Diff,\n+\t\t})\n+\t}\n+\n+\t// Store as JSON file\n+\tfilename := fmt.Sprintf(\"commit_%s.json\", commitDiff.CommitHash[:8])\n+\tfilePath := filepath.Join(c.storagePath, filename)\n+\n+\tdata, err := json.MarshalIndent(analysisData, \"\", \"  \")\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to marshal commit analysis data: %w\", err)\n+\t}\n+\n+\tif err := os.WriteFile(filePath, data, 0644); err != nil {\n+\t\treturn fmt.Errorf(\"failed to write commit analysis file: %w\", err)\n+\t}\n+\n+\t// Also store as latest.json for easy access\n+\tlatestPath := filepath.Join(c.storagePath, \"latest.json\")\n+\tif err := os.WriteFile(latestPath, data, 0644); err != nil {\n+\t\treturn fmt.Errorf(\"failed to write latest commit analysis file: %w\", err)\n+\t}\n+\n+\treturn nil\n+}\n+\n+// GetLatestCommitAnalysis retrieves the most recent commit analysis\n+func (c *CommitStorageService) GetLatestCommitAnalysis() (*models.CommitAnalysisData, error) {\n+\tc.mutex.RLock()\n+\tdefer c.mutex.RUnlock()\n+\n+\tlatestPath := filepath.Join(c.storagePath, \"latest.json\")\n+\tdata, err := os.ReadFile(latestPath)\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\treturn nil, fmt.Errorf(\"no commit analysis data found\")\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"failed to read latest commit analysis: %w\", err)\n+\t}\n+\n+\tvar analysisData models.CommitAnalysisData\n+\tif err := json.Unmarshal(data, \u0026analysisData); err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to unmarshal commit analysis data: %w\", err)\n+\t}\n+\n+\treturn \u0026analysisData, nil\n+}\n+\n+// GetCommitAnalysisByHash retrieves commit analysis by commit hash\n+func (c *CommitStorageService) GetCommitAnalysisByHash(commitHash string) (*models.CommitAnalysisData, error) {\n+\tc.mutex.RLock()\n+\tdefer c.mutex.RUnlock()\n+\n+\tfilename := fmt.Sprintf(\"commit_%s.json\", commitHash[:8])\n+\tfilepath := filepath.Join(c.storagePath, filename)\n+\n+\tdata, err := os.ReadFile(filepath)\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\treturn nil, fmt.Errorf(\"commit analysis not found for hash: %s\", commitHash[:8])\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"failed to read commit analysis file: %w\", err)\n+\t}\n+\n+\tvar analysisData models.CommitAnalysisData\n+\tif err := json.Unmarshal(data, \u0026analysisData); err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to unmarshal commit analysis data: %w\", err)\n+\t}\n+\n+\treturn \u0026analysisData, nil\n+}\n+\n+// GetAllCommitAnalyses retrieves all stored commit analyses\n+func (c *CommitStorageService) GetAllCommitAnalyses() ([]*models.CommitAnalysisData, error) {\n+\tc.mutex.RLock()\n+\tdefer c.mutex.RUnlock()\n+\n+\tfiles, err := filepath.Glob(filepath.Join(c.storagePath, \"commit_*.json\"))\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to list commit analysis files: %w\", err)\n+\t}\n+\n+\tvar analyses []*models.CommitAnalysisData\n+\tfor _, file := range files {\n+\t\tdata, err := os.ReadFile(file)\n+\t\tif err != nil {\n+\t\t\tcontinue // Skip files that can't be read\n+\t\t}\n+\n+\t\tvar analysisData models.CommitAnalysisData\n+\t\tif err := json.Unmarshal(data, \u0026analysisData); err != nil {\n+\t\t\tcontinue // Skip files that can't be unmarshaled\n+\t\t}\n+\n+\t\tanalyses = append(analyses, \u0026analysisData)\n+\t}\n+\n+\treturn analyses, nil\n+}\n"
    },
    {
      "file_name": "backend/internal/services/git_service.go",
      "status": "M",
      "additions": 94,
      "deletions": 34,
      "diff": "diff --git a/backend/internal/services/git_service.go b/backend/internal/services/git_service.go\nindex 59289a2..8fb77b6 100644\n--- a/backend/internal/services/git_service.go\n+++ b/backend/internal/services/git_service.go\n@@ -1,10 +1,13 @@\n package services\n \n import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n \t\"fmt\"\n \t\"log\"\n+\t\"net/http\"\n \t\"os\"\n \t\"os/exec\"\n \t\"path/filepath\"\n \t\"strings\"\n \t\"time\"\n@@ -26,15 +29,15 @@ func NewGitService(repoPath string) *GitService {\n }\n \n // FileDiff represents changes to a single file\n type FileDiff struct {\n \tFileName    string `json:\"file_name\"`\n-\tStatus      string `json:\"status\"`      // A (added), M (modified), D (deleted), R (renamed)\n+\tStatus      string `json:\"status\"` // A (added), M (modified), D (deleted), R (renamed)\n \tAdditions   int    `json:\"additions\"`\n \tDeletions   int    `json:\"deletions\"`\n \tOldFileName string `json:\"old_file_name,omitempty\"` // For renamed files\n-\tDiff        string `json:\"diff\"`        // The actual diff content for this file\n+\tDiff        string `json:\"diff\"`                    // The actual diff content for this file\n }\n \n // CommitDiff represents the difference information for a commit\n type CommitDiff struct {\n \tCommitHash   string     `json:\"commit_hash\"`\n@@ -168,18 +171,18 @@ func (g *GitService) getCommitDiffUsingGitCommand(commitHash string) (string, *D\n \tif err := os.Chdir(g.repoPath); err != nil {\n \t\treturn \"\", nil, fmt.Errorf(\"failed to change directory: %w\", err)\n \t}\n \n \t// Get detailed diff with more context lines and better formatting\n-\tcmd := exec.Command(\"git\", \"show\", \n-\t\t\"--pretty=format:\", \n-\t\t\"--unified=5\",        // Show 5 lines of context around changes\n-\t\t\"--color=never\",      // Disable color for clean output\n-\t\t\"--full-index\",       // Show full SHA-1 in diff header\n-\t\t\"--stat\",             // Include file statistics\n+\tcmd := exec.Command(\"git\", \"show\",\n+\t\t\"--pretty=format:\",\n+\t\t\"--unified=5\",   // Show 5 lines of context around changes\n+\t\t\"--color=never\", // Disable color for clean output\n+\t\t\"--full-index\",  // Show full SHA-1 in diff header\n+\t\t\"--stat\",        // Include file statistics\n \t\tcommitHash)\n-\t\n+\n \tdetailedDiff, err := cmd.Output()\n \tif err != nil {\n \t\treturn \"\", nil, fmt.Errorf(\"failed to execute git show for detailed diff: %w\", err)\n \t}\n \n@@ -370,49 +373,49 @@ func (g *GitService) extractFileDiffFromFullDiff(commitHash, fileName string) (s\n \tif err != nil {\n \t\treturn \"\", fmt.Errorf(\"failed to get full diff: %w\", err)\n \t}\n \n \tfullDiff := string(output)\n-\t\n+\n \t// Find the section for this file\n \tlines := strings.Split(fullDiff, \"\\n\")\n \tvar fileDiffLines []string\n \tinTargetFile := false\n-\t\n+\n \tfor _, line := range lines {\n \t\t// Look for diff header for our file\n \t\tif strings.HasPrefix(line, \"diff --git\") \u0026\u0026 strings.Contains(line, fileName) {\n \t\t\tinTargetFile = true\n \t\t\tfileDiffLines = append(fileDiffLines, line)\n \t\t\tcontinue\n \t\t}\n-\t\t\n+\n \t\t// If we're in our target file, collect lines\n \t\tif inTargetFile {\n \t\t\t// Stop when we hit the next file's diff header\n \t\t\tif strings.HasPrefix(line, \"diff --git\") \u0026\u0026 !strings.Contains(line, fileName) {\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tfileDiffLines = append(fileDiffLines, line)\n \t\t}\n \t}\n-\t\n+\n \tif len(fileDiffLines) == 0 {\n \t\treturn fmt.Sprintf(\"No diff found for file: %s\", fileName), nil\n \t}\n-\t\n+\n \treturn strings.Join(fileDiffLines, \"\\n\"), nil\n }\n \n // parseGitStats parses git stats output to extract additions and deletions\n func (g *GitService) parseGitStats(statsOutput string) *DiffStats {\n \tstats := \u0026DiffStats{}\n \tlines := strings.Split(statsOutput, \"\\n\")\n-\t\n+\n \tfor _, line := range lines {\n \t\tline = strings.TrimSpace(line)\n-\t\t\n+\n \t\t// Parse numstat format: \"additions\\tdeletions\\tfilename\"\n \t\tif strings.Contains(line, \"\\t\") {\n \t\t\tparts := strings.Split(line, \"\\t\")\n \t\t\tif len(parts) \u003e= 2 {\n \t\t\t\tif additions := parseInt(parts[0]); additions \u003e 0 {\n@@ -437,11 +440,11 @@ func (g *GitService) parseGitStats(statsOutput string) *DiffStats {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \treturn stats\n }\n \n // parseInt safely parses an integer from string\n func parseInt(s string) int {\n@@ -465,24 +468,24 @@ func (g *GitService) PrintCommitDiff(commitDiff *CommitDiff) {\n \tfmt.Printf(\"üë§ Author: %s \u003c%s\u003e\\n\", commitDiff.Author, commitDiff.Email)\n \tfmt.Printf(\"‚è∞ Timestamp: %s\\n\", commitDiff.Timestamp.Format(\"2006-01-02 15:04:05\"))\n \tfmt.Printf(\"üí¨ Message: %s\\n\", strings.TrimSpace(commitDiff.Message))\n \tfmt.Printf(\"üìä Changes: +%d additions, -%d deletions\\n\", commitDiff.Additions, commitDiff.Deletions)\n \tfmt.Printf(\"üìÅ Files Changed (%d):\\n\", len(commitDiff.FilesChanged))\n-\t\n+\n \tfor _, file := range commitDiff.FilesChanged {\n \t\tfmt.Printf(\"   ‚Ä¢ %s\\n\", file)\n \t}\n-\t\n+\n \t// Show detailed file-by-file differences\n \tif len(commitDiff.FileDiffs) \u003e 0 {\n \t\tfmt.Println(\"\\n\" + strings.Repeat(\"=\", 80))\n \t\tfmt.Println(\"üìã DETAILED FILE CHANGES:\")\n \t\tfmt.Println(strings.Repeat(\"=\", 80))\n-\t\t\n+\n \t\tfor i, fileDiff := range commitDiff.FileDiffs {\n \t\t\tfmt.Printf(\"\\nüìÑ File %d: %s\", i+1, fileDiff.FileName)\n-\t\t\t\n+\n \t\t\t// Show status\n \t\t\tswitch fileDiff.Status {\n \t\t\tcase \"A\":\n \t\t\t\tfmt.Printf(\" (‚úÖ ADDED)\")\n \t\t\tcase \"M\":\n@@ -494,26 +497,26 @@ func (g *GitService) PrintCommitDiff(commitDiff *CommitDiff) {\n \t\t\t\t\tfmt.Printf(\" (üîÑ RENAMED from %s)\", fileDiff.OldFileName)\n \t\t\t\t} else {\n \t\t\t\t\tfmt.Printf(\" (%s)\", fileDiff.Status)\n \t\t\t\t}\n \t\t\t}\n-\t\t\t\n+\n \t\t\tfmt.Printf(\" [+%d/-%d]\\n\", fileDiff.Additions, fileDiff.Deletions)\n \t\t\tfmt.Println(strings.Repeat(\"-\", 80))\n-\t\t\t\n+\n \t\t\t// Show the actual diff content\n \t\t\tif strings.TrimSpace(fileDiff.Diff) != \"\" {\n \t\t\t\tfmt.Println(fileDiff.Diff)\n \t\t\t} else {\n \t\t\t\tfmt.Println(\"(No diff content available)\")\n \t\t\t}\n-\t\t\t\n+\n \t\t\tif i \u003c len(commitDiff.FileDiffs)-1 {\n \t\t\t\tfmt.Println(\"\\n\" + strings.Repeat(\"-\", 40))\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\tfmt.Println(\"\\n\" + strings.Repeat(\"=\", 80))\n \t} else {\n \t\t// Fallback to showing the full diff if no file diffs available\n \t\tfmt.Println(\"\\n\" + strings.Repeat(\"=\", 80))\n \t\tfmt.Println(\"üìã DETAILED DIFF:\")\n@@ -524,23 +527,48 @@ func (g *GitService) PrintCommitDiff(commitDiff *CommitDiff) {\n }\n \n // OnCommitHook is called when a commit is made (to be used with git hooks)\n func (g *GitService) OnCommitHook() error {\n \tlog.Println(\"üéØ Git commit detected! Analyzing changes...\")\n-\t\n+\n+\tcommitDiff, err := g.GetLatestCommitDiff()\n+\tif err != nil {\n+\t\tlog.Printf(\"‚ùå Error getting commit diff: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\t// Print the diff to console\n+\tg.PrintCommitDiff(commitDiff)\n+\n+\t// Optional: Log to file as well\n+\tg.logCommitToFile(commitDiff)\n+\n+\treturn nil\n+}\n+\n+// OnCommitHookWithAPI is called when a commit is made and sends data to API\n+func (g *GitService) OnCommitHookWithAPI(apiURL string) error {\n+\tlog.Println(\"üéØ Git commit detected! Analyzing changes...\")\n+\n \tcommitDiff, err := g.GetLatestCommitDiff()\n \tif err != nil {\n \t\tlog.Printf(\"‚ùå Error getting commit diff: %v\", err)\n \t\treturn err\n \t}\n-\t\n+\n \t// Print the diff to console\n \tg.PrintCommitDiff(commitDiff)\n-\t\n+\n+\t// Send to API\n+\tif err := g.sendCommitToAPI(commitDiff, apiURL); err != nil {\n+\t\tlog.Printf(\"‚ö†Ô∏è Warning: Failed to send commit analysis to API: %v\", err)\n+\t\t// Don't fail the hook if API is unavailable\n+\t}\n+\n \t// Optional: Log to file as well\n \tg.logCommitToFile(commitDiff)\n-\t\n+\n \treturn nil\n }\n \n // logCommitToFile logs commit information to a file\n func (g *GitService) logCommitToFile(commitDiff *CommitDiff) {\n@@ -549,42 +577,74 @@ func (g *GitService) logCommitToFile(commitDiff *CommitDiff) {\n \tif err != nil {\n \t\tlog.Printf(\"Warning: Could not write to log file: %v\", err)\n \t\treturn\n \t}\n \tdefer file.Close()\n-\t\n+\n \tlogEntry := fmt.Sprintf(\"[%s] %s by %s - %d files changed (+%d/-%d)\\n\",\n \t\tcommitDiff.Timestamp.Format(\"2006-01-02 15:04:05\"),\n \t\tcommitDiff.CommitHash[:8],\n \t\tcommitDiff.Author,\n \t\tlen(commitDiff.FilesChanged),\n \t\tcommitDiff.Additions,\n \t\tcommitDiff.Deletions,\n \t)\n-\t\n+\n \tfile.WriteString(logEntry)\n }\n \n+// sendCommitToAPI sends commit analysis data to the API\n+func (g *GitService) sendCommitToAPI(commitDiff *CommitDiff, apiURL string) error {\n+\t// Prepare the JSON payload\n+\tjsonData, err := json.Marshal(commitDiff)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to marshal commit diff: %w\", err)\n+\t}\n+\n+\t// Create HTTP request\n+\treq, err := http.NewRequest(\"POST\", apiURL+\"/api/v1/commits\", bytes.NewBuffer(jsonData))\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to create HTTP request: %w\", err)\n+\t}\n+\n+\treq.Header.Set(\"Content-Type\", \"application/json\")\n+\n+\t// Send request\n+\tclient := \u0026http.Client{Timeout: 10 * time.Second}\n+\tresp, err := client.Do(req)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to send HTTP request: %w\", err)\n+\t}\n+\tdefer resp.Body.Close()\n+\n+\tif resp.StatusCode != http.StatusOK {\n+\t\treturn fmt.Errorf(\"API returned status code: %d\", resp.StatusCode)\n+\t}\n+\n+\tlog.Println(\"‚úÖ Commit analysis sent to API successfully\")\n+\treturn nil\n+}\n+\n // GetCurrentRepoPath tries to find the git repository root\n func GetCurrentRepoPath() (string, error) {\n \t// Start from current directory and walk up to find .git\n \tdir, err := os.Getwd()\n \tif err != nil {\n \t\treturn \"\", err\n \t}\n-\t\n+\n \tfor {\n \t\tgitDir := filepath.Join(dir, \".git\")\n \t\tif _, err := os.Stat(gitDir); err == nil {\n \t\t\treturn dir, nil\n \t\t}\n-\t\t\n+\n \t\tparent := filepath.Dir(dir)\n \t\tif parent == dir {\n \t\t\t// Reached root directory\n \t\t\tbreak\n \t\t}\n \t\tdir = parent\n \t}\n-\t\n+\n \treturn \"\", fmt.Errorf(\"not in a git repository\")\n }\n"
    },
    {
      "file_name": "backend/main.go",
      "status": "M",
      "additions": 7,
      "deletions": 2,
      "diff": "diff --git a/backend/main.go b/backend/main.go\nindex 620f537..d9fc3d2 100644\n--- a/backend/main.go\n+++ b/backend/main.go\n@@ -1,17 +1,19 @@\n package main\n \n import (\n \t\"log\"\n+\t\"path/filepath\"\n \n \t\"github.com/gofiber/fiber/v2\"\n \t\"github.com/gofiber/fiber/v2/middleware/cors\"\n \t\"github.com/gofiber/fiber/v2/middleware/logger\"\n \t\"github.com/gofiber/fiber/v2/middleware/recover\"\n \n \t\"adaptive-threat-modeler/internal/api\"\n \t\"adaptive-threat-modeler/internal/config\"\n+\t\"adaptive-threat-modeler/internal/handlers\"\n )\n \n func main() {\n \t// Load configuration\n \tcfg := config.Load()\n@@ -40,14 +42,18 @@ func main() {\n \t\tAllowCredentials: false,\n \t\tExposeHeaders:    \"Content-Length\",\n \t\tMaxAge:           300,\n \t}))\n \n+\t// Initialize commit storage\n+\tstoragePath := filepath.Join(\".\", \"data\", \"commits\")\n+\thandlers.InitializeCommitStorage(storagePath)\n+\n \t// Health check\n \tapp.Get(\"/health\", func(c *fiber.Ctx) error {\n \t\treturn c.JSON(fiber.Map{\n-\t\t\t\"status\": \"healthy\",\n+\t\t\t\"status\":  \"healthy\",\n \t\t\t\"service\": \"adaptive-threat-modeler\",\n \t\t})\n \t})\n \n \t// API routes\n@@ -55,6 +61,5 @@ func main() {\n \n \t// Start server\n \tlog.Printf(\"Server starting on port %s\", cfg.Port)\n \tlog.Fatal(app.Listen(\":\" + cfg.Port))\n }\n-\n"
    },
    {
      "file_name": "backend/scripts/setup-git-hooks.sh",
      "status": "M",
      "additions": 1,
      "deletions": 1,
      "diff": "diff --git a/backend/scripts/setup-git-hooks.sh b/backend/scripts/setup-git-hooks.sh\nindex 06d5c70..3ed10c6 100755\n--- a/backend/scripts/setup-git-hooks.sh\n+++ b/backend/scripts/setup-git-hooks.sh\n@@ -59,11 +59,11 @@ if [ ! -f \"$GIT_HOOK_BINARY\" ]; then\n fi\n \n # Run the commit analysis\n echo \"üîç Running commit analysis...\"\n cd \"$REPO_ROOT\"\n-\"$GIT_HOOK_BINARY\" --hook --repo \"$REPO_ROOT\"\n+\"$GIT_HOOK_BINARY\" --hook --api --api-url \"http://localhost:8000\" --repo \"$REPO_ROOT\"\n \n echo \"‚úÖ Post-commit analysis complete!\"\n EOF\n \n # Make the hook executable\n"
    }
  ],
  "full_diff": " backend/bin/git-hook                         | Bin 8896930 -\u003e 10151938 bytes\n backend/bin/threat-modeler                   | Bin 0 -\u003e 15142242 bytes\n backend/cmd/git-hook/main.go                 |  14 ++-\n backend/data/commits/commit_a50aebc8.json    |  23 ++++\n backend/data/commits/commit_f114c2fb.json    |  23 ++++\n backend/data/commits/latest.json             |  23 ++++\n backend/hrhrhr.txt                           |   1 +\n backend/internal/api/routes.go               |   9 +-\n backend/internal/handlers/commit_analysis.go | 163 +++++++++++++++++++++++++++\n backend/internal/models/models.go            | 104 ++++++++++-------\n backend/internal/services/commit_storage.go  | 157 ++++++++++++++++++++++++++\n backend/internal/services/git_service.go     | 128 +++++++++++++++------\n backend/main.go                              |   9 +-\n backend/scripts/setup-git-hooks.sh           |   2 +-\n 14 files changed, 574 insertions(+), 82 deletions(-)\n\ndiff --git a/backend/bin/git-hook b/backend/bin/git-hook\nindex c41939fc3c1298147716bcfa881ff5112dc896fb..c3447bcb0fb57b83c25f7d82bc64e59da97a4656 100755\nBinary files a/backend/bin/git-hook and b/backend/bin/git-hook differ\ndiff --git a/backend/bin/threat-modeler b/backend/bin/threat-modeler\nnew file mode 100755\nindex 0000000000000000000000000000000000000000..7d1690ed9f27f92e99c9944da1aa308b2950f128\nBinary files /dev/null and b/backend/bin/threat-modeler differ\ndiff --git a/backend/cmd/git-hook/main.go b/backend/cmd/git-hook/main.go\nindex 8497029c398e5a4a611e022963a3206bc8b999cf..5943f06bc7431fefe3d8725f85d340e24db24aed 100644\n--- a/backend/cmd/git-hook/main.go\n+++ b/backend/cmd/git-hook/main.go\n@@ -10,17 +10,19 @@ import (\n func main() {\n \tvar (\n \t\trepoPath   = flag.String(\"repo\", \"\", \"Path to git repository (default: current directory)\")\n \t\tcommitHash = flag.String(\"commit\", \"\", \"Specific commit hash to analyze (default: latest)\")\n \t\thookMode   = flag.Bool(\"hook\", false, \"Run in git hook mode\")\n+\t\tapiMode    = flag.Bool(\"api\", false, \"Send analysis to API instead of just console output\")\n+\t\tapiURL     = flag.String(\"api-url\", \"http://localhost:8080\", \"API base URL\")\n \t)\n \tflag.Parse()\n \n \t// Determine repository path\n \tvar gitRepoPath string\n \tvar err error\n-\t\n+\n \tif *repoPath != \"\" {\n \t\tgitRepoPath = *repoPath\n \t} else {\n \t\tgitRepoPath, err = services.GetCurrentRepoPath()\n \t\tif err != nil {\n@@ -32,12 +34,18 @@ func main() {\n \tgitService := services.NewGitService(gitRepoPath)\n \n \tif *hookMode {\n \t\t// Run in hook mode - analyze latest commit\n \t\tlog.Println(\"üéØ Running git commit analysis hook...\")\n-\t\tif err := gitService.OnCommitHook(); err != nil {\n-\t\t\tlog.Fatalf(\"‚ùå Hook execution failed: %v\", err)\n+\t\tif *apiMode {\n+\t\t\tif err := gitService.OnCommitHookWithAPI(*apiURL); err != nil {\n+\t\t\t\tlog.Fatalf(\"‚ùå Hook execution failed: %v\", err)\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif err := gitService.OnCommitHook(); err != nil {\n+\t\t\t\tlog.Fatalf(\"‚ùå Hook execution failed: %v\", err)\n+\t\t\t}\n \t\t}\n \t} else if *commitHash != \"\" {\n \t\t// Analyze specific commit\n \t\tlog.Printf(\"üîç Analyzing commit: %s\", *commitHash)\n \t\tcommitDiff, err := gitService.GetCommitDiff(*commitHash)\ndiff --git a/backend/data/commits/commit_a50aebc8.json b/backend/data/commits/commit_a50aebc8.json\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..00b63fbdfcd76e102ffb1832bbaa747ffe49f4cd\n--- /dev/null\n+++ b/backend/data/commits/commit_a50aebc8.json\n@@ -0,0 +1,23 @@\n+{\n+  \"id\": \"commit_a50aebc8_1756925410\",\n+  \"timestamp\": \"2025-09-04T00:20:10.529728+05:30\",\n+  \"commit_hash\": \"a50aebc8ecfa2b4d72cddb7863fff4db3723ab0b\",\n+  \"author\": \"arpit529srivastava\",\n+  \"email\": \"arpitsrivastava529@gmail.com\",\n+  \"message\": \"hmm\\n\\nSigned-off-by: arpit529srivastava \\u003carpitsrivastava529@gmail.com\\u003e\\n\",\n+  \"files_changed\": [\n+    \"backend/bin/git-hook\"\n+  ],\n+  \"additions\": 0,\n+  \"deletions\": 0,\n+  \"file_diffs\": [\n+    {\n+      \"file_name\": \"backend/bin/git-hook\",\n+      \"status\": \"A\",\n+      \"additions\": 0,\n+      \"deletions\": 0,\n+      \"diff\": \"diff --git a/backend/bin/git-hook b/backend/bin/git-hook\\nnew file mode 100755\\nindex 0000000..c41939f\\nBinary files /dev/null and b/backend/bin/git-hook differ\\n\"\n+    }\n+  ],\n+  \"full_diff\": \" backend/bin/git-hook | Bin 0 -\\u003e 8896930 bytes\\n 1 file changed, 0 insertions(+), 0 deletions(-)\\n\\ndiff --git a/backend/bin/git-hook b/backend/bin/git-hook\\nnew file mode 100755\\nindex 0000000000000000000000000000000000000000..c41939fc3c1298147716bcfa881ff5112dc896fb\\nBinary files /dev/null and b/backend/bin/git-hook differ\\n\"\n+}\n\\ No newline at end of file\ndiff --git a/backend/data/commits/commit_f114c2fb.json b/backend/data/commits/commit_f114c2fb.json\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..e2e26e02a69141a76041bbad21575931c5fcf05a\n--- /dev/null\n+++ b/backend/data/commits/commit_f114c2fb.json\n@@ -0,0 +1,23 @@\n+{\n+  \"id\": \"commit_f114c2fb_1756925492\",\n+  \"timestamp\": \"2025-09-04T00:21:32.818898+05:30\",\n+  \"commit_hash\": \"f114c2fb808014b24a6d0d7329c563221931d62b\",\n+  \"author\": \"arpit529srivastava\",\n+  \"email\": \"arpitsrivastava529@gmail.com\",\n+  \"message\": \"Final test of API integration\\n\",\n+  \"files_changed\": [\n+    \"test_file.txt\"\n+  ],\n+  \"additions\": 1,\n+  \"deletions\": 0,\n+  \"file_diffs\": [\n+    {\n+      \"file_name\": \"test_file.txt\",\n+      \"status\": \"M\",\n+      \"additions\": 1,\n+      \"deletions\": 0,\n+      \"diff\": \"diff --git a/test_file.txt b/test_file.txt\\nindex 78f7014..9fc63ac 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+    }\n+  ],\n+  \"full_diff\": \" test_file.txt | 1 +\\n 1 file changed, 1 insertion(+)\\n\\ndiff --git a/test_file.txt b/test_file.txt\\nindex 78f701474af270aa146e20f571427bfa5a05c1d0..9fc63ac31a48ddf463e1ae318aec6d3a36c8bed0 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+}\n\\ No newline at end of file\ndiff --git a/backend/data/commits/latest.json b/backend/data/commits/latest.json\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..e2e26e02a69141a76041bbad21575931c5fcf05a\n--- /dev/null\n+++ b/backend/data/commits/latest.json\n@@ -0,0 +1,23 @@\n+{\n+  \"id\": \"commit_f114c2fb_1756925492\",\n+  \"timestamp\": \"2025-09-04T00:21:32.818898+05:30\",\n+  \"commit_hash\": \"f114c2fb808014b24a6d0d7329c563221931d62b\",\n+  \"author\": \"arpit529srivastava\",\n+  \"email\": \"arpitsrivastava529@gmail.com\",\n+  \"message\": \"Final test of API integration\\n\",\n+  \"files_changed\": [\n+    \"test_file.txt\"\n+  ],\n+  \"additions\": 1,\n+  \"deletions\": 0,\n+  \"file_diffs\": [\n+    {\n+      \"file_name\": \"test_file.txt\",\n+      \"status\": \"M\",\n+      \"additions\": 1,\n+      \"deletions\": 0,\n+      \"diff\": \"diff --git a/test_file.txt b/test_file.txt\\nindex 78f7014..9fc63ac 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+    }\n+  ],\n+  \"full_diff\": \" test_file.txt | 1 +\\n 1 file changed, 1 insertion(+)\\n\\ndiff --git a/test_file.txt b/test_file.txt\\nindex 78f701474af270aa146e20f571427bfa5a05c1d0..9fc63ac31a48ddf463e1ae318aec6d3a36c8bed0 100644\\n--- a/test_file.txt\\n+++ b/test_file.txt\\n@@ -1,2 +1,3 @@\\n test commit for API\\n another test\\n+final test\\n\"\n+}\n\\ No newline at end of file\ndiff --git a/backend/hrhrhr.txt b/backend/hrhrhr.txt\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..3c4ab6ab5e6308ac4d68623cac28c06cd11b44a8\n--- /dev/null\n+++ b/backend/hrhrhr.txt\n@@ -0,0 +1 @@\n+hello testing\n\\ No newline at end of file\ndiff --git a/backend/internal/api/routes.go b/backend/internal/api/routes.go\nindex 96a2a4deedcc48886af84ab99eec256f2420273a..b9e5c7f3a199d1a4ef0aafd1cc870ee448011829 100644\n--- a/backend/internal/api/routes.go\n+++ b/backend/internal/api/routes.go\n@@ -1,10 +1,10 @@\n package api\n \n import (\n \t\"github.com/gofiber/fiber/v2\"\n-\t\n+\n \t\"adaptive-threat-modeler/internal/handlers\"\n )\n \n // SetupRoutes configures all API routes\n func SetupRoutes(app *fiber.App) {\n@@ -24,9 +24,14 @@ func SetupRoutes(app *fiber.App) {\n \n \t// Rules endpoints\n \tapi.Get(\"/rules\", handlers.GetAvailableRules)\n \tapi.Get(\"/rules/:language\", handlers.GetRulesForLanguage)\n \n+\t// Commit analysis endpoints\n+\tapi.Get(\"/commits/latest\", handlers.GetLatestCommitAnalysis)\n+\tapi.Get(\"/commits/:hash\", handlers.GetCommitAnalysisByHash)\n+\tapi.Get(\"/commits\", handlers.GetAllCommitAnalyses)\n+\tapi.Post(\"/commits\", handlers.StoreCommitAnalysis)\n+\n \t// Health and info endpoints\n \tapi.Get(\"/info\", handlers.GetSystemInfo)\n }\n-\ndiff --git a/backend/internal/handlers/commit_analysis.go b/backend/internal/handlers/commit_analysis.go\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..0dfa311588ac1f7b8e7250d8c715ffa55ccbb5af\n--- /dev/null\n+++ b/backend/internal/handlers/commit_analysis.go\n@@ -0,0 +1,163 @@\n+package handlers\n+\n+import (\n+\t\"strconv\"\n+\n+\t\"adaptive-threat-modeler/internal/models\"\n+\t\"adaptive-threat-modeler/internal/services\"\n+\n+\t\"github.com/gofiber/fiber/v2\"\n+)\n+\n+var commitStorage *services.CommitStorageService\n+\n+// InitializeCommitStorage initializes the commit storage service\n+func InitializeCommitStorage(storagePath string) {\n+\tcommitStorage = services.NewCommitStorageService(storagePath)\n+}\n+\n+// GetLatestCommitAnalysis returns the most recent commit analysis data\n+func GetLatestCommitAnalysis(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\tanalysis, err := commitStorage.GetLatestCommitAnalysis()\n+\tif err != nil {\n+\t\treturn c.Status(404).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"data\":    analysis,\n+\t})\n+}\n+\n+// GetCommitAnalysisByHash returns commit analysis data for a specific commit hash\n+func GetCommitAnalysisByHash(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\tcommitHash := c.Params(\"hash\")\n+\tif commitHash == \"\" {\n+\t\treturn c.Status(400).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit hash is required\",\n+\t\t})\n+\t}\n+\n+\tanalysis, err := commitStorage.GetCommitAnalysisByHash(commitHash)\n+\tif err != nil {\n+\t\treturn c.Status(404).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"data\":    analysis,\n+\t})\n+}\n+\n+// GetAllCommitAnalyses returns all stored commit analyses\n+func GetAllCommitAnalyses(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\t// Parse query parameters for pagination\n+\tpage := 1\n+\tlimit := 10\n+\n+\tif pageStr := c.Query(\"page\"); pageStr != \"\" {\n+\t\tif p, err := strconv.Atoi(pageStr); err == nil \u0026\u0026 p \u003e 0 {\n+\t\t\tpage = p\n+\t\t}\n+\t}\n+\n+\tif limitStr := c.Query(\"limit\"); limitStr != \"\" {\n+\t\tif l, err := strconv.Atoi(limitStr); err == nil \u0026\u0026 l \u003e 0 \u0026\u0026 l \u003c= 100 {\n+\t\t\tlimit = l\n+\t\t}\n+\t}\n+\n+\tanalyses, err := commitStorage.GetAllCommitAnalyses()\n+\tif err != nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\t// Simple pagination\n+\ttotal := len(analyses)\n+\tstart := (page - 1) * limit\n+\tend := start + limit\n+\n+\tvar paginatedAnalyses []*models.CommitAnalysisData\n+\tif start \u003e= total {\n+\t\tpaginatedAnalyses = []*models.CommitAnalysisData{}\n+\t} else {\n+\t\tif end \u003e total {\n+\t\t\tend = total\n+\t\t}\n+\t\tpaginatedAnalyses = analyses[start:end]\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"data\": fiber.Map{\n+\t\t\t\"analyses\": paginatedAnalyses,\n+\t\t\t\"pagination\": fiber.Map{\n+\t\t\t\t\"page\":        page,\n+\t\t\t\t\"limit\":       limit,\n+\t\t\t\t\"total\":       total,\n+\t\t\t\t\"total_pages\": (total + limit - 1) / limit,\n+\t\t\t},\n+\t\t},\n+\t})\n+}\n+\n+// StoreCommitAnalysis stores new commit analysis data (used by git hook)\n+func StoreCommitAnalysis(c *fiber.Ctx) error {\n+\tif commitStorage == nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Commit storage not initialized\",\n+\t\t})\n+\t}\n+\n+\tvar commitDiff services.CommitDiff\n+\tif err := c.BodyParser(\u0026commitDiff); err != nil {\n+\t\treturn c.Status(400).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": \"Invalid request body\",\n+\t\t})\n+\t}\n+\n+\tif err := commitStorage.StoreCommitAnalysis(\u0026commitDiff); err != nil {\n+\t\treturn c.Status(500).JSON(fiber.Map{\n+\t\t\t\"error\":   true,\n+\t\t\t\"message\": err.Error(),\n+\t\t})\n+\t}\n+\n+\treturn c.JSON(fiber.Map{\n+\t\t\"success\": true,\n+\t\t\"message\": \"Commit analysis stored successfully\",\n+\t})\n+}\ndiff --git a/backend/internal/models/models.go b/backend/internal/models/models.go\nindex 9c39c9cf4fe81c49803f460e87b9012a346d6abb..19bb831762ea26168167562af8532b9f5d25f56f 100644\n--- a/backend/internal/models/models.go\n+++ b/backend/internal/models/models.go\n@@ -10,15 +10,15 @@ type AnalysisRequest struct {\n \tFilename string `json:\"filename,omitempty\"`\n }\n \n // ProjectInfo contains detected project metadata\n type ProjectInfo struct {\n-\tLanguages   []string          `json:\"languages\"`\n-\tFrameworks  []string          `json:\"frameworks\"`\n-\tServices    []ServiceInfo     `json:\"services\"`\n+\tLanguages    []string          `json:\"languages\"`\n+\tFrameworks   []string          `json:\"frameworks\"`\n+\tServices     []ServiceInfo     `json:\"services\"`\n \tDependencies map[string]string `json:\"dependencies\"`\n-\tConfigFiles []string          `json:\"config_files\"`\n+\tConfigFiles  []string          `json:\"config_files\"`\n }\n \n // ServiceInfo represents a detected service/component\n type ServiceInfo struct {\n \tName      string            `json:\"name\"`\n@@ -27,15 +27,15 @@ type ServiceInfo struct {\n \tConfig    map[string]string `json:\"config,omitempty\"`\n }\n \n // EndpointInfo represents an API endpoint\n type EndpointInfo struct {\n-\tPath     string   `json:\"path\"`\n-\tMethod   string   `json:\"method\"`\n-\tHandler  string   `json:\"handler\"`\n-\tParams   []string `json:\"params,omitempty\"`\n-\tAuthReq  bool     `json:\"auth_required\"`\n+\tPath    string   `json:\"path\"`\n+\tMethod  string   `json:\"method\"`\n+\tHandler string   `json:\"handler\"`\n+\tParams  []string `json:\"params,omitempty\"`\n+\tAuthReq bool     `json:\"auth_required\"`\n }\n \n // Vulnerability represents a security finding\n type Vulnerability struct {\n \tID          string            `json:\"id\"`\n@@ -73,24 +73,24 @@ type AutoFix struct {\n \tConfidence  string `json:\"confidence\"` // high, medium, low\n }\n \n // ThreatMap represents the visual threat model\n type ThreatMap struct {\n-\tComponents []Component  `json:\"components\"`\n-\tFlows      []DataFlow   `json:\"flows\"`\n-\tTrustZones []TrustZone  `json:\"trust_zones\"`\n-\tAssets     []Asset      `json:\"assets\"`\n+\tComponents []Component `json:\"components\"`\n+\tFlows      []DataFlow  `json:\"flows\"`\n+\tTrustZones []TrustZone `json:\"trust_zones\"`\n+\tAssets     []Asset     `json:\"assets\"`\n }\n \n // Component represents a system component\n type Component struct {\n-\tID          string            `json:\"id\"`\n-\tName        string            `json:\"name\"`\n-\tType        string            `json:\"type\"` // process, datastore, external_entity\n-\tTrustZone   string            `json:\"trust_zone\"`\n-\tProperties  map[string]string `json:\"properties\"`\n-\tThreats     []string          `json:\"threats\"` // vulnerability IDs\n+\tID         string            `json:\"id\"`\n+\tName       string            `json:\"name\"`\n+\tType       string            `json:\"type\"` // process, datastore, external_entity\n+\tTrustZone  string            `json:\"trust_zone\"`\n+\tProperties map[string]string `json:\"properties\"`\n+\tThreats    []string          `json:\"threats\"` // vulnerability IDs\n }\n \n // DataFlow represents data movement between components\n type DataFlow struct {\n \tID          string            `json:\"id\"`\n@@ -112,36 +112,60 @@ type TrustZone struct {\n \tComponents  []string `json:\"components\"` // component IDs\n }\n \n // Asset represents a valuable resource\n type Asset struct {\n-\tID           string   `json:\"id\"`\n-\tName         string   `json:\"name\"`\n-\tType         string   `json:\"type\"` // data, service, infrastructure\n-\tSensitivity  string   `json:\"sensitivity\"` // public, internal, confidential, restricted\n-\tComponents   []string `json:\"components\"` // component IDs that handle this asset\n-\tThreats      []string `json:\"threats\"`\n+\tID          string   `json:\"id\"`\n+\tName        string   `json:\"name\"`\n+\tType        string   `json:\"type\"`        // data, service, infrastructure\n+\tSensitivity string   `json:\"sensitivity\"` // public, internal, confidential, restricted\n+\tComponents  []string `json:\"components\"`  // component IDs that handle this asset\n+\tThreats     []string `json:\"threats\"`\n }\n \n // AnalysisResult is the final response structure\n type AnalysisResult struct {\n-\tID             string            `json:\"id\"`\n-\tTimestamp      time.Time         `json:\"timestamp\"`\n-\tProjectInfo    ProjectInfo       `json:\"project_info\"`\n-\tVulnerabilities []Vulnerability  `json:\"vulnerabilities\"`\n-\tThreatMap      ThreatMap         `json:\"threat_map\"`\n-\tSummary        Summary           `json:\"summary\"`\n-\tRecommendations []string         `json:\"recommendations\"`\n-\tStatus         string            `json:\"status\"`\n-\tProcessingTime string            `json:\"processing_time\"`\n+\tID              string          `json:\"id\"`\n+\tTimestamp       time.Time       `json:\"timestamp\"`\n+\tProjectInfo     ProjectInfo     `json:\"project_info\"`\n+\tVulnerabilities []Vulnerability `json:\"vulnerabilities\"`\n+\tThreatMap       ThreatMap       `json:\"threat_map\"`\n+\tSummary         Summary         `json:\"summary\"`\n+\tRecommendations []string        `json:\"recommendations\"`\n+\tStatus          string          `json:\"status\"`\n+\tProcessingTime  string          `json:\"processing_time\"`\n }\n \n // Summary provides high-level statistics\n type Summary struct {\n-\tTotalVulnerabilities int                    `json:\"total_vulnerabilities\"`\n-\tSeverityBreakdown    map[string]int         `json:\"severity_breakdown\"`\n-\tCategoryBreakdown    map[string]int         `json:\"category_breakdown\"`\n-\tRiskScore           float64                 `json:\"risk_score\"`\n-\tSecurityPosture     string                  `json:\"security_posture\"` // excellent, good, fair, poor\n-\tTopRisks            []string                `json:\"top_risks\"`\n+\tTotalVulnerabilities int            `json:\"total_vulnerabilities\"`\n+\tSeverityBreakdown    map[string]int `json:\"severity_breakdown\"`\n+\tCategoryBreakdown    map[string]int `json:\"category_breakdown\"`\n+\tRiskScore            float64        `json:\"risk_score\"`\n+\tSecurityPosture      string         `json:\"security_posture\"` // excellent, good, fair, poor\n+\tTopRisks             []string       `json:\"top_risks\"`\n }\n \n+// CommitAnalysisData represents the stored commit analysis data\n+type CommitAnalysisData struct {\n+\tID           string     `json:\"id\"`\n+\tTimestamp    time.Time  `json:\"timestamp\"`\n+\tCommitHash   string     `json:\"commit_hash\"`\n+\tAuthor       string     `json:\"author\"`\n+\tEmail        string     `json:\"email\"`\n+\tMessage      string     `json:\"message\"`\n+\tFilesChanged []string   `json:\"files_changed\"`\n+\tAdditions    int        `json:\"additions\"`\n+\tDeletions    int        `json:\"deletions\"`\n+\tFileDiffs    []FileDiff `json:\"file_diffs\"`\n+\tFullDiff     string     `json:\"full_diff\"`\n+}\n+\n+// FileDiff represents changes to a single file (moved from git_service.go for API use)\n+type FileDiff struct {\n+\tFileName    string `json:\"file_name\"`\n+\tStatus      string `json:\"status\"` // A (added), M (modified), D (deleted), R (renamed)\n+\tAdditions   int    `json:\"additions\"`\n+\tDeletions   int    `json:\"deletions\"`\n+\tOldFileName string `json:\"old_file_name,omitempty\"` // For renamed files\n+\tDiff        string `json:\"diff\"`                    // The actual diff content for this file\n+}\ndiff --git a/backend/internal/services/commit_storage.go b/backend/internal/services/commit_storage.go\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..8a28fb3fd420c3b271e32c74243f32737b2cdca0\n--- /dev/null\n+++ b/backend/internal/services/commit_storage.go\n@@ -0,0 +1,157 @@\n+package services\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"adaptive-threat-modeler/internal/models\"\n+)\n+\n+// CommitStorageService manages storage of commit analysis data\n+type CommitStorageService struct {\n+\tstoragePath string\n+\tmutex       sync.RWMutex\n+}\n+\n+// NewCommitStorageService creates a new commit storage service\n+func NewCommitStorageService(storagePath string) *CommitStorageService {\n+\t// Ensure storage directory exists\n+\tif err := os.MkdirAll(storagePath, 0755); err != nil {\n+\t\tpanic(fmt.Sprintf(\"Failed to create storage directory: %v\", err))\n+\t}\n+\n+\treturn \u0026CommitStorageService{\n+\t\tstoragePath: storagePath,\n+\t}\n+}\n+\n+// StoreCommitAnalysis stores commit analysis data to disk\n+func (c *CommitStorageService) StoreCommitAnalysis(commitDiff *CommitDiff) error {\n+\tc.mutex.Lock()\n+\tdefer c.mutex.Unlock()\n+\n+\t// Convert CommitDiff to CommitAnalysisData\n+\tanalysisData := \u0026models.CommitAnalysisData{\n+\t\tID:           fmt.Sprintf(\"commit_%s_%d\", commitDiff.CommitHash[:8], time.Now().Unix()),\n+\t\tTimestamp:    time.Now(),\n+\t\tCommitHash:   commitDiff.CommitHash,\n+\t\tAuthor:       commitDiff.Author,\n+\t\tEmail:        commitDiff.Email,\n+\t\tMessage:      commitDiff.Message,\n+\t\tFilesChanged: commitDiff.FilesChanged,\n+\t\tAdditions:    commitDiff.Additions,\n+\t\tDeletions:    commitDiff.Deletions,\n+\t\tFullDiff:     commitDiff.Diff,\n+\t}\n+\n+\t// Convert FileDiff to models.FileDiff\n+\tfor _, fileDiff := range commitDiff.FileDiffs {\n+\t\tanalysisData.FileDiffs = append(analysisData.FileDiffs, models.FileDiff{\n+\t\t\tFileName:    fileDiff.FileName,\n+\t\t\tStatus:      fileDiff.Status,\n+\t\t\tAdditions:   fileDiff.Additions,\n+\t\t\tDeletions:   fileDiff.Deletions,\n+\t\t\tOldFileName: fileDiff.OldFileName,\n+\t\t\tDiff:        fileDiff.Diff,\n+\t\t})\n+\t}\n+\n+\t// Store as JSON file\n+\tfilename := fmt.Sprintf(\"commit_%s.json\", commitDiff.CommitHash[:8])\n+\tfilePath := filepath.Join(c.storagePath, filename)\n+\n+\tdata, err := json.MarshalIndent(analysisData, \"\", \"  \")\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to marshal commit analysis data: %w\", err)\n+\t}\n+\n+\tif err := os.WriteFile(filePath, data, 0644); err != nil {\n+\t\treturn fmt.Errorf(\"failed to write commit analysis file: %w\", err)\n+\t}\n+\n+\t// Also store as latest.json for easy access\n+\tlatestPath := filepath.Join(c.storagePath, \"latest.json\")\n+\tif err := os.WriteFile(latestPath, data, 0644); err != nil {\n+\t\treturn fmt.Errorf(\"failed to write latest commit analysis file: %w\", err)\n+\t}\n+\n+\treturn nil\n+}\n+\n+// GetLatestCommitAnalysis retrieves the most recent commit analysis\n+func (c *CommitStorageService) GetLatestCommitAnalysis() (*models.CommitAnalysisData, error) {\n+\tc.mutex.RLock()\n+\tdefer c.mutex.RUnlock()\n+\n+\tlatestPath := filepath.Join(c.storagePath, \"latest.json\")\n+\tdata, err := os.ReadFile(latestPath)\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\treturn nil, fmt.Errorf(\"no commit analysis data found\")\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"failed to read latest commit analysis: %w\", err)\n+\t}\n+\n+\tvar analysisData models.CommitAnalysisData\n+\tif err := json.Unmarshal(data, \u0026analysisData); err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to unmarshal commit analysis data: %w\", err)\n+\t}\n+\n+\treturn \u0026analysisData, nil\n+}\n+\n+// GetCommitAnalysisByHash retrieves commit analysis by commit hash\n+func (c *CommitStorageService) GetCommitAnalysisByHash(commitHash string) (*models.CommitAnalysisData, error) {\n+\tc.mutex.RLock()\n+\tdefer c.mutex.RUnlock()\n+\n+\tfilename := fmt.Sprintf(\"commit_%s.json\", commitHash[:8])\n+\tfilepath := filepath.Join(c.storagePath, filename)\n+\n+\tdata, err := os.ReadFile(filepath)\n+\tif err != nil {\n+\t\tif os.IsNotExist(err) {\n+\t\t\treturn nil, fmt.Errorf(\"commit analysis not found for hash: %s\", commitHash[:8])\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"failed to read commit analysis file: %w\", err)\n+\t}\n+\n+\tvar analysisData models.CommitAnalysisData\n+\tif err := json.Unmarshal(data, \u0026analysisData); err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to unmarshal commit analysis data: %w\", err)\n+\t}\n+\n+\treturn \u0026analysisData, nil\n+}\n+\n+// GetAllCommitAnalyses retrieves all stored commit analyses\n+func (c *CommitStorageService) GetAllCommitAnalyses() ([]*models.CommitAnalysisData, error) {\n+\tc.mutex.RLock()\n+\tdefer c.mutex.RUnlock()\n+\n+\tfiles, err := filepath.Glob(filepath.Join(c.storagePath, \"commit_*.json\"))\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to list commit analysis files: %w\", err)\n+\t}\n+\n+\tvar analyses []*models.CommitAnalysisData\n+\tfor _, file := range files {\n+\t\tdata, err := os.ReadFile(file)\n+\t\tif err != nil {\n+\t\t\tcontinue // Skip files that can't be read\n+\t\t}\n+\n+\t\tvar analysisData models.CommitAnalysisData\n+\t\tif err := json.Unmarshal(data, \u0026analysisData); err != nil {\n+\t\t\tcontinue // Skip files that can't be unmarshaled\n+\t\t}\n+\n+\t\tanalyses = append(analyses, \u0026analysisData)\n+\t}\n+\n+\treturn analyses, nil\n+}\ndiff --git a/backend/internal/services/git_service.go b/backend/internal/services/git_service.go\nindex 59289a27b2664fb5d0a2792957ce6ab99946f69d..8fb77b6ad05304a3ecce724bb57ab5068326184e 100644\n--- a/backend/internal/services/git_service.go\n+++ b/backend/internal/services/git_service.go\n@@ -1,10 +1,13 @@\n package services\n \n import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n \t\"fmt\"\n \t\"log\"\n+\t\"net/http\"\n \t\"os\"\n \t\"os/exec\"\n \t\"path/filepath\"\n \t\"strings\"\n \t\"time\"\n@@ -26,15 +29,15 @@ func NewGitService(repoPath string) *GitService {\n }\n \n // FileDiff represents changes to a single file\n type FileDiff struct {\n \tFileName    string `json:\"file_name\"`\n-\tStatus      string `json:\"status\"`      // A (added), M (modified), D (deleted), R (renamed)\n+\tStatus      string `json:\"status\"` // A (added), M (modified), D (deleted), R (renamed)\n \tAdditions   int    `json:\"additions\"`\n \tDeletions   int    `json:\"deletions\"`\n \tOldFileName string `json:\"old_file_name,omitempty\"` // For renamed files\n-\tDiff        string `json:\"diff\"`        // The actual diff content for this file\n+\tDiff        string `json:\"diff\"`                    // The actual diff content for this file\n }\n \n // CommitDiff represents the difference information for a commit\n type CommitDiff struct {\n \tCommitHash   string     `json:\"commit_hash\"`\n@@ -168,18 +171,18 @@ func (g *GitService) getCommitDiffUsingGitCommand(commitHash string) (string, *D\n \tif err := os.Chdir(g.repoPath); err != nil {\n \t\treturn \"\", nil, fmt.Errorf(\"failed to change directory: %w\", err)\n \t}\n \n \t// Get detailed diff with more context lines and better formatting\n-\tcmd := exec.Command(\"git\", \"show\", \n-\t\t\"--pretty=format:\", \n-\t\t\"--unified=5\",        // Show 5 lines of context around changes\n-\t\t\"--color=never\",      // Disable color for clean output\n-\t\t\"--full-index\",       // Show full SHA-1 in diff header\n-\t\t\"--stat\",             // Include file statistics\n+\tcmd := exec.Command(\"git\", \"show\",\n+\t\t\"--pretty=format:\",\n+\t\t\"--unified=5\",   // Show 5 lines of context around changes\n+\t\t\"--color=never\", // Disable color for clean output\n+\t\t\"--full-index\",  // Show full SHA-1 in diff header\n+\t\t\"--stat\",        // Include file statistics\n \t\tcommitHash)\n-\t\n+\n \tdetailedDiff, err := cmd.Output()\n \tif err != nil {\n \t\treturn \"\", nil, fmt.Errorf(\"failed to execute git show for detailed diff: %w\", err)\n \t}\n \n@@ -370,49 +373,49 @@ func (g *GitService) extractFileDiffFromFullDiff(commitHash, fileName string) (s\n \tif err != nil {\n \t\treturn \"\", fmt.Errorf(\"failed to get full diff: %w\", err)\n \t}\n \n \tfullDiff := string(output)\n-\t\n+\n \t// Find the section for this file\n \tlines := strings.Split(fullDiff, \"\\n\")\n \tvar fileDiffLines []string\n \tinTargetFile := false\n-\t\n+\n \tfor _, line := range lines {\n \t\t// Look for diff header for our file\n \t\tif strings.HasPrefix(line, \"diff --git\") \u0026\u0026 strings.Contains(line, fileName) {\n \t\t\tinTargetFile = true\n \t\t\tfileDiffLines = append(fileDiffLines, line)\n \t\t\tcontinue\n \t\t}\n-\t\t\n+\n \t\t// If we're in our target file, collect lines\n \t\tif inTargetFile {\n \t\t\t// Stop when we hit the next file's diff header\n \t\t\tif strings.HasPrefix(line, \"diff --git\") \u0026\u0026 !strings.Contains(line, fileName) {\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tfileDiffLines = append(fileDiffLines, line)\n \t\t}\n \t}\n-\t\n+\n \tif len(fileDiffLines) == 0 {\n \t\treturn fmt.Sprintf(\"No diff found for file: %s\", fileName), nil\n \t}\n-\t\n+\n \treturn strings.Join(fileDiffLines, \"\\n\"), nil\n }\n \n // parseGitStats parses git stats output to extract additions and deletions\n func (g *GitService) parseGitStats(statsOutput string) *DiffStats {\n \tstats := \u0026DiffStats{}\n \tlines := strings.Split(statsOutput, \"\\n\")\n-\t\n+\n \tfor _, line := range lines {\n \t\tline = strings.TrimSpace(line)\n-\t\t\n+\n \t\t// Parse numstat format: \"additions\\tdeletions\\tfilename\"\n \t\tif strings.Contains(line, \"\\t\") {\n \t\t\tparts := strings.Split(line, \"\\t\")\n \t\t\tif len(parts) \u003e= 2 {\n \t\t\t\tif additions := parseInt(parts[0]); additions \u003e 0 {\n@@ -437,11 +440,11 @@ func (g *GitService) parseGitStats(statsOutput string) *DiffStats {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \treturn stats\n }\n \n // parseInt safely parses an integer from string\n func parseInt(s string) int {\n@@ -465,24 +468,24 @@ func (g *GitService) PrintCommitDiff(commitDiff *CommitDiff) {\n \tfmt.Printf(\"üë§ Author: %s \u003c%s\u003e\\n\", commitDiff.Author, commitDiff.Email)\n \tfmt.Printf(\"‚è∞ Timestamp: %s\\n\", commitDiff.Timestamp.Format(\"2006-01-02 15:04:05\"))\n \tfmt.Printf(\"üí¨ Message: %s\\n\", strings.TrimSpace(commitDiff.Message))\n \tfmt.Printf(\"üìä Changes: +%d additions, -%d deletions\\n\", commitDiff.Additions, commitDiff.Deletions)\n \tfmt.Printf(\"üìÅ Files Changed (%d):\\n\", len(commitDiff.FilesChanged))\n-\t\n+\n \tfor _, file := range commitDiff.FilesChanged {\n \t\tfmt.Printf(\"   ‚Ä¢ %s\\n\", file)\n \t}\n-\t\n+\n \t// Show detailed file-by-file differences\n \tif len(commitDiff.FileDiffs) \u003e 0 {\n \t\tfmt.Println(\"\\n\" + strings.Repeat(\"=\", 80))\n \t\tfmt.Println(\"üìã DETAILED FILE CHANGES:\")\n \t\tfmt.Println(strings.Repeat(\"=\", 80))\n-\t\t\n+\n \t\tfor i, fileDiff := range commitDiff.FileDiffs {\n \t\t\tfmt.Printf(\"\\nüìÑ File %d: %s\", i+1, fileDiff.FileName)\n-\t\t\t\n+\n \t\t\t// Show status\n \t\t\tswitch fileDiff.Status {\n \t\t\tcase \"A\":\n \t\t\t\tfmt.Printf(\" (‚úÖ ADDED)\")\n \t\t\tcase \"M\":\n@@ -494,26 +497,26 @@ func (g *GitService) PrintCommitDiff(commitDiff *CommitDiff) {\n \t\t\t\t\tfmt.Printf(\" (üîÑ RENAMED from %s)\", fileDiff.OldFileName)\n \t\t\t\t} else {\n \t\t\t\t\tfmt.Printf(\" (%s)\", fileDiff.Status)\n \t\t\t\t}\n \t\t\t}\n-\t\t\t\n+\n \t\t\tfmt.Printf(\" [+%d/-%d]\\n\", fileDiff.Additions, fileDiff.Deletions)\n \t\t\tfmt.Println(strings.Repeat(\"-\", 80))\n-\t\t\t\n+\n \t\t\t// Show the actual diff content\n \t\t\tif strings.TrimSpace(fileDiff.Diff) != \"\" {\n \t\t\t\tfmt.Println(fileDiff.Diff)\n \t\t\t} else {\n \t\t\t\tfmt.Println(\"(No diff content available)\")\n \t\t\t}\n-\t\t\t\n+\n \t\t\tif i \u003c len(commitDiff.FileDiffs)-1 {\n \t\t\t\tfmt.Println(\"\\n\" + strings.Repeat(\"-\", 40))\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\tfmt.Println(\"\\n\" + strings.Repeat(\"=\", 80))\n \t} else {\n \t\t// Fallback to showing the full diff if no file diffs available\n \t\tfmt.Println(\"\\n\" + strings.Repeat(\"=\", 80))\n \t\tfmt.Println(\"üìã DETAILED DIFF:\")\n@@ -524,23 +527,48 @@ func (g *GitService) PrintCommitDiff(commitDiff *CommitDiff) {\n }\n \n // OnCommitHook is called when a commit is made (to be used with git hooks)\n func (g *GitService) OnCommitHook() error {\n \tlog.Println(\"üéØ Git commit detected! Analyzing changes...\")\n-\t\n+\n+\tcommitDiff, err := g.GetLatestCommitDiff()\n+\tif err != nil {\n+\t\tlog.Printf(\"‚ùå Error getting commit diff: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\t// Print the diff to console\n+\tg.PrintCommitDiff(commitDiff)\n+\n+\t// Optional: Log to file as well\n+\tg.logCommitToFile(commitDiff)\n+\n+\treturn nil\n+}\n+\n+// OnCommitHookWithAPI is called when a commit is made and sends data to API\n+func (g *GitService) OnCommitHookWithAPI(apiURL string) error {\n+\tlog.Println(\"üéØ Git commit detected! Analyzing changes...\")\n+\n \tcommitDiff, err := g.GetLatestCommitDiff()\n \tif err != nil {\n \t\tlog.Printf(\"‚ùå Error getting commit diff: %v\", err)\n \t\treturn err\n \t}\n-\t\n+\n \t// Print the diff to console\n \tg.PrintCommitDiff(commitDiff)\n-\t\n+\n+\t// Send to API\n+\tif err := g.sendCommitToAPI(commitDiff, apiURL); err != nil {\n+\t\tlog.Printf(\"‚ö†Ô∏è Warning: Failed to send commit analysis to API: %v\", err)\n+\t\t// Don't fail the hook if API is unavailable\n+\t}\n+\n \t// Optional: Log to file as well\n \tg.logCommitToFile(commitDiff)\n-\t\n+\n \treturn nil\n }\n \n // logCommitToFile logs commit information to a file\n func (g *GitService) logCommitToFile(commitDiff *CommitDiff) {\n@@ -549,42 +577,74 @@ func (g *GitService) logCommitToFile(commitDiff *CommitDiff) {\n \tif err != nil {\n \t\tlog.Printf(\"Warning: Could not write to log file: %v\", err)\n \t\treturn\n \t}\n \tdefer file.Close()\n-\t\n+\n \tlogEntry := fmt.Sprintf(\"[%s] %s by %s - %d files changed (+%d/-%d)\\n\",\n \t\tcommitDiff.Timestamp.Format(\"2006-01-02 15:04:05\"),\n \t\tcommitDiff.CommitHash[:8],\n \t\tcommitDiff.Author,\n \t\tlen(commitDiff.FilesChanged),\n \t\tcommitDiff.Additions,\n \t\tcommitDiff.Deletions,\n \t)\n-\t\n+\n \tfile.WriteString(logEntry)\n }\n \n+// sendCommitToAPI sends commit analysis data to the API\n+func (g *GitService) sendCommitToAPI(commitDiff *CommitDiff, apiURL string) error {\n+\t// Prepare the JSON payload\n+\tjsonData, err := json.Marshal(commitDiff)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to marshal commit diff: %w\", err)\n+\t}\n+\n+\t// Create HTTP request\n+\treq, err := http.NewRequest(\"POST\", apiURL+\"/api/v1/commits\", bytes.NewBuffer(jsonData))\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to create HTTP request: %w\", err)\n+\t}\n+\n+\treq.Header.Set(\"Content-Type\", \"application/json\")\n+\n+\t// Send request\n+\tclient := \u0026http.Client{Timeout: 10 * time.Second}\n+\tresp, err := client.Do(req)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to send HTTP request: %w\", err)\n+\t}\n+\tdefer resp.Body.Close()\n+\n+\tif resp.StatusCode != http.StatusOK {\n+\t\treturn fmt.Errorf(\"API returned status code: %d\", resp.StatusCode)\n+\t}\n+\n+\tlog.Println(\"‚úÖ Commit analysis sent to API successfully\")\n+\treturn nil\n+}\n+\n // GetCurrentRepoPath tries to find the git repository root\n func GetCurrentRepoPath() (string, error) {\n \t// Start from current directory and walk up to find .git\n \tdir, err := os.Getwd()\n \tif err != nil {\n \t\treturn \"\", err\n \t}\n-\t\n+\n \tfor {\n \t\tgitDir := filepath.Join(dir, \".git\")\n \t\tif _, err := os.Stat(gitDir); err == nil {\n \t\t\treturn dir, nil\n \t\t}\n-\t\t\n+\n \t\tparent := filepath.Dir(dir)\n \t\tif parent == dir {\n \t\t\t// Reached root directory\n \t\t\tbreak\n \t\t}\n \t\tdir = parent\n \t}\n-\t\n+\n \treturn \"\", fmt.Errorf(\"not in a git repository\")\n }\ndiff --git a/backend/main.go b/backend/main.go\nindex 620f53777ffea12f040ccac2cc738454f6a69037..d9fc3d2759d56b8b5a623f739537cd5f8b2a1650 100644\n--- a/backend/main.go\n+++ b/backend/main.go\n@@ -1,17 +1,19 @@\n package main\n \n import (\n \t\"log\"\n+\t\"path/filepath\"\n \n \t\"github.com/gofiber/fiber/v2\"\n \t\"github.com/gofiber/fiber/v2/middleware/cors\"\n \t\"github.com/gofiber/fiber/v2/middleware/logger\"\n \t\"github.com/gofiber/fiber/v2/middleware/recover\"\n \n \t\"adaptive-threat-modeler/internal/api\"\n \t\"adaptive-threat-modeler/internal/config\"\n+\t\"adaptive-threat-modeler/internal/handlers\"\n )\n \n func main() {\n \t// Load configuration\n \tcfg := config.Load()\n@@ -40,14 +42,18 @@ func main() {\n \t\tAllowCredentials: false,\n \t\tExposeHeaders:    \"Content-Length\",\n \t\tMaxAge:           300,\n \t}))\n \n+\t// Initialize commit storage\n+\tstoragePath := filepath.Join(\".\", \"data\", \"commits\")\n+\thandlers.InitializeCommitStorage(storagePath)\n+\n \t// Health check\n \tapp.Get(\"/health\", func(c *fiber.Ctx) error {\n \t\treturn c.JSON(fiber.Map{\n-\t\t\t\"status\": \"healthy\",\n+\t\t\t\"status\":  \"healthy\",\n \t\t\t\"service\": \"adaptive-threat-modeler\",\n \t\t})\n \t})\n \n \t// API routes\n@@ -55,6 +61,5 @@ func main() {\n \n \t// Start server\n \tlog.Printf(\"Server starting on port %s\", cfg.Port)\n \tlog.Fatal(app.Listen(\":\" + cfg.Port))\n }\n-\ndiff --git a/backend/scripts/setup-git-hooks.sh b/backend/scripts/setup-git-hooks.sh\nindex 06d5c707e8702dec323e819707398be12cdfd617..3ed10c6ebb9e08458d44c43361d16afcd5ab53d4 100755\n--- a/backend/scripts/setup-git-hooks.sh\n+++ b/backend/scripts/setup-git-hooks.sh\n@@ -59,11 +59,11 @@ if [ ! -f \"$GIT_HOOK_BINARY\" ]; then\n fi\n \n # Run the commit analysis\n echo \"üîç Running commit analysis...\"\n cd \"$REPO_ROOT\"\n-\"$GIT_HOOK_BINARY\" --hook --repo \"$REPO_ROOT\"\n+\"$GIT_HOOK_BINARY\" --hook --api --api-url \"http://localhost:8000\" --repo \"$REPO_ROOT\"\n \n echo \"‚úÖ Post-commit analysis complete!\"\n EOF\n \n # Make the hook executable\n"
}