version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - DEBUG=false
      - LOG_LEVEL=warn
    volumes:
      - backend-data:/app/data
    networks:
      - threat-modeler-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - VITE_API_URL=https://your-domain.com
    depends_on:
      - backend
    networks:
      - threat-modeler-network
    restart: unless-stopped
    volumes:
      - ./ssl:/etc/nginx/ssl:ro

  mcp-agent:
    build:
      context: ./mcp
      dockerfile: Dockerfile
    environment:
      - BACKEND_API_URL=http://backend:8080
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_OWNER=${GITHUB_OWNER}
      - GITHUB_REPO=${GITHUB_REPO}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      - backend
    networks:
      - threat-modeler-network
    restart: unless-stopped

  # Optional: Add a reverse proxy for SSL termination
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - threat-modeler-network
    restart: unless-stopped

networks:
  threat-modeler-network:
    driver: bridge

volumes:
  backend-data:
    driver: local